{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Template spins up an EC2 and creates a micro Neo environment using prebuilt containers to test against",
  "Parameters": {
    "coreVer": {
      "Description": "Core version to test against",
      "Type": "String"
    },
    "adminVer": {
      "Description": "Admin version to test against",
      "Type": "String"
    },
    "testMode": {
      "Description": "",
      "Type": "String"
    },
    "browser": {
      "Description": "",
      "Type": "String"
    },
    "suite": {
      "Description": "",
      "Type": "String"
    },
    "testPlanid": {
      "Description": "",
      "Type": "String"
    },
    "costCenter": {
      "Default": "W235",
      "Type": "String"
    },
    "branchName": {
      "Default": "master",
      "Type": "String"
    },
    "purpose": {
      "Default": "neo",
      "Type": "String"
    }
  },
  "Resources" : {
    "securityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupName" : { "Fn::Join": [ "", [ "qa-auto-testing", {"Ref": "AWS::StackName"} ] ] },
        "GroupDescription" : "SG allowing SSH ingress to testing instance",
        "SecurityGroupIngress" : {
          "CidrIp": "172.0.0.0/6",
          "FromPort": "22",
          "ToPort": "22",
          "IpProtocol": "tcp"
          },
        "Tags" : [
          {
            "Key": "Cost Center",
            "Value": { "Ref": "costCenter" }
          },
          {
            "Key": "Purpose",
            "Value": { "Ref": "purpose" }
          }
        ]
      }
    },
    "instanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "ec2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "ManagedPolicyArns": [ "arn:aws:iam::aws:policy/AdministratorAccess" ],
        "RoleName": { "Fn::Join": [ "", [ "auto-testing-", {"Ref": "AWS::StackName"} ] ] }
      }
    },
    "instanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "instanceRole" } ]
      },
      "DependsOn": "instanceRole"
    },
    "ec2Instance": {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "CreditSpecification" : {
          "CPUCredits" : "unlimited"
        },
        "IamInstanceProfile" : { "Ref": "instanceProfile"},
        "ImageId" : "ami-fb32279b",
        "InstanceType" : "t2.medium",
        "KeyName" : "DevopsNeo",
        "SecurityGroupIds" : [ "sg-9a524fe3" ],
        "SubnetId" : "subnet-2e42ba76",
        "Tags" : [
          {
            "Key": "Cost Center",
            "Value": { "Ref": "costCenter" }
          },
          {
            "Key": "Purpose",
            "Value": { "Ref": "purpose" }
          }
        ],
        "UserData" : {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",

                "export coreVer=", { "Ref": "coreVer" }, "\n",
                "export adminVer=", { "Ref": "adminVer" }, "\n",
                "export testMode=", { "Ref": "testMode" }, "\n",
                "export browser=", { "Ref": "browser" }, "\n",
                "export suite=", { "Ref": "suite" }, "\n",
                "export testPlanid=", { "Ref": "testPlanid" }, "\n",
                "export stackName=", {"Ref": "AWS::StackName"}, "\n",
                "export branchName=", {"Ref": "branchName"}, "\n",

                "apt-get update && apt-get install awscli -y\n",

                "aws s3api get-object --bucket idexxneo-devops-us-east-1 --key automation-testing/executeCoreTests.sh --region us-east-1 /root/executeCoreTests.sh\n",
                "chmod +x /root/executeCoreTests.sh\n",
                "pushd /root\n",
                "./executeCoreTests.sh ${coreVer} ${adminVer} ${testMode} ${browser} ${suite} ${testPlanid} ${stackName}\n"
              ]
            ]
          }
        }
      }
    }
  },
  "Outputs": {
    "coreAutomationIP": {
      "Description": "EC2 Instance IP Address",
      "Value": {
        "Fn::GetAtt": [
          "ec2Instance",
          "PrivateIp"
        ]
      }
    }
  }
}